// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  emailVerified  DateTime?
  phone          String?
  password       String?
  role           Role             @default(USER)
  isActive       Boolean          @default(true)
  image          String?
  accounts       Account[]
  appointments   Appointment[]    @relation("BookedUser")
  bookings       Appointment[]    @relation("BookedBy")
  adminBookings  Appointment[]    @relation("CreatedBy")
  address        Address?
  FAQ            FAQ[]
  Ticket         Ticket[]
  individual     Individual?
  businessAdmins BusinessAdmin[] // Admins for businesses
  lastActive     DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BusinessDetail BusinessDetail[]
    ratings       Rating[]  @relation("UserRatings") // Ratings given by this user for services.
    @@index([name])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  GUEST // For non-logged-in users (replaces GUEST)
  USER
  ADMIN
  SUPER_ADMIN
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  country String
  zipCode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
  individualId String?     @unique
  individual   Individual? @relation(fields: [individualId], references: [id])
}

model Service {
  id                  String                @id @default(cuid())
  title               String
  description         String
   imageUrl            String?
  imageUrlFileId      String?
  createdAt           DateTime              @default(now())
  status              Status                 @default(ACTIVE)
  estimatedDuration   Int
  serviceAvailability ServiceAvailability[]
  appointments        Appointment[]
  reminders           Reminder[]
  resources           Resource[]
  updatedAt           DateTime              @updatedAt
  businessDetail      BusinessDetail?       @relation(fields: [businessDetailId], references: [id])
  businessDetailId    String?
   individual           Individual? @relation(fields: [individualId], references: [id])       
  individualId        String?              
  isMultiResource     Boolean               @default(false) // True if multiple resources can handle the service simultaneously.
  shareableLinks      ShareableLink[] // Links for sharing specific or all time slots.
  ratings             Rating[] // Customer ratings for this service.
   meetings           Meeting[]
   documents          Document[]
}

model ServiceAvailability {
  id        String        @id @default(cuid())
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String
  weekDay   WeekDays
  timeSlots ServiceTime[]
}

model ServiceTime {
  id                    String              @id @default(cuid())
  serviceAvailability   ServiceAvailability @relation(fields: [serviceAvailabilityId], references: [id], onDelete: Cascade)
  serviceAvailabilityId String
  startTime             String
  endTime               String
  shareableLinks        ShareableLink[] // Links for sharing this specific time slot.
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Reminder {
  id             String           @id @default(cuid())
  type           ReminderType
  title          String
  description    String?
  message        String?
  services       Service[]
  notifications  Notification[]
  reminderOffset ReminderOffset[]
}

model ReminderOffset {
  id                 String                      @id @default(cuid())
  sendOffset         Int?
  customScheduleAt   String?
  sendBefore         Boolean
  reminder           Reminder                    @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  reminderId         String
  appointmentOffsets AppointmentReminderOffset[]
}

model AppointmentReminderOffset {
  id               String         @id @default(cuid())
  appointment      Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId    String
  reminderOffset   ReminderOffset @relation(fields: [reminderOffsetId], references: [id], onDelete: Cascade)
  reminderOffsetId String
  scheduledAt      DateTime
  status           ReminderStatus @default(PENDING)
}

enum ReminderType {
  REMINDER
  FOLLOW_UP
  CANCELLATION
  MISSED
  CUSTOM
}

enum NotificationMethod {
  SMS
  EMAIL
  PUSH
}

enum ReminderStatus {
  PENDING
  TRIGGERED
  SENT
  FAILED
}

model Notification {
  id         String             @id @default(cuid())
  method     NotificationMethod
  reminderId String
  reminder   Reminder           @relation(fields: [reminderId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String                      @id @default(cuid())
  customerName    String
  email           String
  phone           String
  status          AppointmentStatus           @default(SCHEDULED)
  cancelledAt     DateTime?
  userId          String?
  user            User?                       @relation("BookedUser", fields: [userId], references: [id])
  bookedById      String?
  bookedBy        User?                       @relation("BookedBy", fields: [bookedById], references: [id])
  service         Service                     @relation(fields: [serviceId], references: [id])
  serviceId       String
  selectedDate    DateTime
  selectedTime    String
  message         String?
  isForSelf       Boolean?                    @default(true)
  createdBy       User?                       @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  Resource        Resource?                   @relation(fields: [resourceId], references: [id])
  resourceId      String?
  reminderOffsets AppointmentReminderOffset[]
    meeting        Meeting[]
  shareableLinks  ShareableLink[] // Links for sharing this appointment's time slot.
  documents        Document[] // Link to indexed documents
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  FOLLOW_UP
}

model AnnouncementOrOffer {
  id          String             @id @default(cuid())
  title       String
  description String?
  message     String?
  audience    TargetAudience
  isImmediate Boolean            @default(true)
  scheduledAt DateTime
  showOn      Showon
  expiredAt   ExpirationDuration @default(THIRTY_DAYS)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  isSent      Boolean  @default(false)
}

enum Showon {
  BANNER
  PUSH
  EMAIL
  SMS
  ALL
}

enum TargetAudience {
  ALL
  APPOINTED_USERS
  CANCELLED_USERS
}

enum ExpirationDuration {
  ONE_DAY
  THREE_DAYS
  SEVEN_DAYS
  THIRTY_DAYS
  NEVER
}

model BusinessDetail {
  id                         String                 @id @default(cuid())
  name                       String
  industry                   String
  email                      String                 @unique
  phone                      String
  website                    String?
  address                    BusinessAddress[]
  businessRegistrationNumber String
  taxId                    String?
  taxIdFileId                String? 
  logo                       String? 
  logoFileId                 String? 
  status                     BusinessStatus         @default(PENDING)
  timeZone                   String?
  user                       User?                  @relation(fields: [businessOwner], references: [id], onDelete: Cascade)
  businessOwner              String?
  businessAdmins             BusinessAdmin[] // Added for multiple admins
  businessAvailability       BusinessAvailability[]
  holiday                    Holiday[]
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  supportBusinessDetail      SupportBusinessDetail?
  resources                  Resource[]
  services                   Service[]
  documents                  Document[] // Added for RAG
}

model BusinessAdmin {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, businessId]) // One admin per business per user
}

model BusinessAddress {
  id         String                 @id @default(cuid())
  street     String
  city       String
  country    String
  zipCode    String
  googleMap  String
  business   BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String?
  support    SupportBusinessDetail? @relation(fields: [supportId], references: [id], onDelete: Cascade)
  supportId  String?
}

model BusinessAvailability {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  weekDay                 WeekDays
  type                    AvailabilityType       @default(GENERAL)
  timeSlots               BusinessTime[]
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id], onDelete: Cascade)
  supportBusinessDetailId String?
}

enum AvailabilityType {
  GENERAL
  SUPPORT
}

enum BusinessTimeType {
  WORK
  BREAK
}

model BusinessTime {
  id                     String               @id @default(cuid())
  businessAvailability   BusinessAvailability @relation(fields: [businessAvailabilityId], references: [id], onDelete: Cascade)
  type                   BusinessTimeType     @default(WORK)
  businessAvailabilityId String
  startTime              String
  endTime                String
}

model Holiday {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  holiday                 WeekDays
  type                    HolidayType            @default(GENERAL)
  date                    DateTime?
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id])
  supportBusinessDetailId String?
}

enum HolidayType {
  GENERAL
  SUPPORT
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model SupportBusinessDetail {
  id                  String                 @id @default(cuid())
  supportBusinessName String
  supportEmail        String                 @unique
  supportPhone        String
  supportGoogleMap    String?
  supportAvailability BusinessAvailability[]
  supportHoliday      Holiday[]
  supportAddress      String
  business            BusinessDetail         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String                 @unique
  BusinessAddress     BusinessAddress[]
}

model FAQ {
  id              String   @id @default(cuid())
  question        String
  answer          String
  category        String?
  isActive        Boolean  @default(true)
  order           Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastUpdatedById String
  User            User     @relation(fields: [createdById], references: [id])
  createdById     String
}

model Ticket {
  id                    String       @id @default(cuid())
  userType              Role
  subject               String
  ticketDescription     String
  category              String
  priority              Priority     @default(MEDIUM)
  status                TicketStatus @default(OPEN)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  assignedTo            String?
  resolutionDescription String?
  proofFiles            String?
  initiatedById         String?
  userId                String
  user                  User         @relation(fields: [userId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Resource {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  phone        String
  role         String
  address      String?
  businessId   String
  business     BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services     Service[]
  appointments Appointment[]
  shareableLinks ShareableLink[] // Links for sharing this resource's time slots.
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

// -------- Individual

model Individual {
  id             String   @id @default(cuid())
  userId         String   @unique
  bio            String?
  position       String     // e.g. "Product Designer", "Marketing Coach"
  profileImage   String?
  imageFileId    String?
  country        String 
  timezone      String  @default("UTC")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  services        Service[]  
  videoIntegrations VideoIntegration[]
  company        String?  // Organization they work for
  website        String?  // Personal/company website
  linkedinUrl   String?
  address         Address?  
  addressId       Int?       @unique // Address ID.
  experiences     Experience[] // Past experiences or certifications for credibility.
}

// Stores past experiences or certifications for an individual.
model Experience {
  id            String     @id @default(cuid()) // Unique ID for the experience.
  individualId  String // Individual ID.
  individual    Individual @relation(fields: [individualId], references: [id], onDelete: Cascade) // Links to the individual.
  company       String? // Optional company name (e.g., "Freelance" or "Google").
  role          String // Role (e.g., "Senior Consultant").
  description   String? // Optional description of responsibilities or achievements.
  startDate     String? // Optional start date.
  endDate       String? // Optional end date, null if ongoing.
  isCertification Boolean  @default(false) // True if this is a certification (e.g., "Certified Scrum Master").
  createdAt     DateTime @default(now()) // Creation timestamp.
  updatedAt     DateTime @updatedAt // Last updated timestamp.
}


enum VideoProvider {
  ZOOM
  GOOGLE_MEET
  MICROSOFT_TEAMS
  WEBEX
  GOTO_MEETING
}

model VideoIntegration {
  id                  String        @id @default(cuid())
  individualId        String
  provider            VideoProvider
  accessToken         String
  refreshToken        String?
  expiresAt           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  individual          Individual    @relation(fields: [individualId], references: [id])
  
  @@unique([individualId, provider])
}

enum EventType {
  ONE_TO_ONE
  GENERAL
}


// Represents a shareable link for booking time slots or viewing availability.
model ShareableLink {
  id              String        @id @default(cuid()) // Unique ID for the link.
  location        String       // e.g. Zoom, Google Meet
  slug            String        @unique // Unique URL slug (e.g., "/link/abc123").
  type           EventType       
  appointmentId   String? // Appointment ID, if linked to a specific appointment.
  appointment     Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: Cascade) // Links to the appointment.
  serviceId       String? // Service ID.
  service         Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Links to the service.
  resourceId      String? // Resource ID, for multi-resource services.
  resource        Resource?     @relation(fields: [resourceId], references: [id], onDelete: Cascade) // Links to the resource.
  serviceTimeId   String? // Time slot ID, for single-slot links.
  serviceTime     ServiceTime?  @relation(fields: [serviceTimeId], references: [id], onDelete: Cascade) // Links to the time slot.
  date            DateTime? // Specific date for the link (e.g., for DAILY_SLOTS).
  dateRangeEnd    DateTime? // End date for multi-day links (e.g., for MULTI_DAY_SLOTS).
  linkType        LinkType      @default(SINGLE_SLOT) // Type of link (SINGLE_SLOT, DAILY_SLOTS, MULTI_DAY_SLOTS).
  metaTitle       String? // SEO title for the link (e.g., "Book a Coaching Session").
  metaDescription String? // SEO description for the link.
  createdAt       DateTime      @default(now()) // Creation timestamp.
  expiresAt       DateTime? // Optional expiration date for the link.
  videoUrl        String?       // For one-to-one direct link
}

// Type of shareable link.
enum LinkType {
  SINGLE_SLOT // Link for a single time slot (e.g., "May 28, 2025, 10:00 AM").
  DAILY_SLOTS // Link for all time slots on a specific day (e.g., "All slots on May 28").
  MULTI_DAY_SLOTS // Link for all time slots across multiple days (e.g., "Next 7 days").
}

model Meeting {
  id             String   @id @default(cuid())
  serviceId    String
  startTime      DateTime @default(now()) // Default to current time
  endTime DateTime @default(dbgenerated("NOW() + interval '1 hour'")) // When the meeting ends
  bookedByName   String
  bookedByEmail  String
  bookerTimezone String?        // Store the timezone of the person booking
  comment        String?
  videoUrl       String?
  videoProvider  VideoProvider?
  slug           String? @unique
 service       Service?       @relation(fields: [serviceId], references: [id]) // Links to the service.
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String
}

// Stores customer ratings for services.
model Rating {
  id        String    @id @default(cuid()) // Unique ID for the rating.
  serviceId String // Service ID.
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Links to the service.
  userId    String // User ID.
  user      User      @relation("UserRatings", fields: [userId], references: [id]) // Links to the user.
  score     Int // Rating score (1-5 stars).
  review    String? // Optional review text.
  createdAt DateTime  @default(now()) // Creation timestamp.
  updatedAt DateTime  @updatedAt // Last updated timestamp.
}
model Document {
  id        String   @id @default(uuid())
  content   String // Text to be indexed (e.g., "Appointment for haircut at 10 AM")
  source    String? 
  accessLevel Role[] // Roles that can access this document
  appointmentId String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  embedding   Unsupported("vector(1024)")?
  serviceId    String?
  service      Service?     @relation(fields: [serviceId], references: [id])
   businessId    String?
  business      BusinessDetail? @relation(fields: [businessId], references: [id])
   metadata     Json? 
}

model ConversationState {
  userId         String   @id
  flow           String?      // e.g. 'booking', 'cancellation', etc.
  collectedFields Json?       // Stores partial fields (e.g. {"customerName": "...", "email": "..."})
  missingFields  String[]     // e.g. ["selectedDate", "selectedTime"]
  updatedAt      DateTime @updatedAt
}
