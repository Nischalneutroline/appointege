// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  phone             String?
  password          String?
  role              Role               @default(USER)
  isActive          Boolean            @default(true)
  image             String?
  accounts          Account[]
  appointments      Appointment[]      @relation("BookedUser")
  bookings          Appointment[]      @relation("BookedBy")
  adminBookings     Appointment[]      @relation("CreatedBy")
  address           Address?
  FAQ               FAQ[]
  Ticket            Ticket[]
  individual        Individual?
  events            Event[]
  businessAdmins    BusinessAdmin[] // Admins for businesses
  businessCustomers BusinessCustomer[] // Customers who booked with businesses
  lastActive        DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ownedBusinesses   BusinessDetail[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  GUEST
  USER
  ADMIN
  SUPER_ADMIN
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  country String
  zipCode String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
}

model Service {
  id                  String                @id @default(cuid())
  title               String
  description         String
  createdAt           DateTime              @default(now())
  status              Status                @default(ACTIVE)
  estimatedDuration   Int
  serviceAvailability ServiceAvailability[]
  appointments        Appointment[]
  reminders           Reminder[]
  resources           Resource[]
  updatedAt           DateTime              @updatedAt
  businessDetail      BusinessDetail?       @relation(fields: [businessDetailId], references: [id])
  businessDetailId    String?
  documents           Document[]
}

model ServiceAvailability {
  id               String          @id @default(cuid())
  service          Service?        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId        String?
  weekDay          WeekDays
  timeSlots        ServiceTime[]
  BusinessDetail   BusinessDetail? @relation(fields: [businessDetailId], references: [id])
  businessDetailId String?
}

model ServiceTime {
  id                    String              @id @default(cuid())
  serviceAvailability   ServiceAvailability @relation(fields: [serviceAvailabilityId], references: [id], onDelete: Cascade)
  serviceAvailabilityId String
  startTime             String
  endTime               String
}

enum Status {
  ACTIVE
  INACTIVE
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Reminder {
  id             String           @id @default(cuid())
  type           ReminderType
  title          String
  description    String?
  message        String?
  services       Service[]
  notifications  Notification[]
  reminderOffset ReminderOffset[]
}

model ReminderOffset {
  id                 String                      @id @default(cuid())
  sendOffset         Int?
  customScheduleAt   String?
  sendBefore         Boolean
  reminder           Reminder                    @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  reminderId         String
  appointmentOffsets AppointmentReminderOffset[]
}

model AppointmentReminderOffset {
  id               String         @id @default(cuid())
  appointment      Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId    String
  reminderOffset   ReminderOffset @relation(fields: [reminderOffsetId], references: [id], onDelete: Cascade)
  reminderOffsetId String
  scheduledAt      DateTime
  status           ReminderStatus @default(PENDING)
}

enum ReminderType {
  REMINDER
  FOLLOW_UP
  CANCELLATION
  MISSED
  CUSTOM
}

enum NotificationMethod {
  SMS
  EMAIL
  PUSH
}

enum ReminderStatus {
  PENDING
  TRIGGERED
  SENT
  FAILED
}

model Notification {
  id         String             @id @default(cuid())
  method     NotificationMethod
  reminderId String
  reminder   Reminder           @relation(fields: [reminderId], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String                      @id @default(cuid())
  customerName    String
  email           String
  phone           String
  status          AppointmentStatus           @default(SCHEDULED)
  cancelledAt     DateTime?
  userId          String?
  user            User?                       @relation("BookedUser", fields: [userId], references: [id])
  bookedById      String?
  bookedBy        User?                       @relation("BookedBy", fields: [bookedById], references: [id])
  service         Service                     @relation(fields: [serviceId], references: [id])
  serviceId       String
  selectedDate    DateTime
  selectedTime    String
  message         String?
  isForSelf       Boolean?                    @default(true)
  createdBy       User?                       @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  Resource        Resource?                   @relation(fields: [resourceId], references: [id])
  resourceId      String?
  reminderOffsets AppointmentReminderOffset[]
  documents       Document[]
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  FOLLOW_UP
}

model AnnouncementOrOffer {
  id          String             @id @default(cuid())
  title       String
  description String?
  message     String?
  audience    TargetAudience
  isImmediate Boolean            @default(true)
  scheduledAt DateTime
  showOn      Showon
  expiredAt   ExpirationDuration @default(THIRTY_DAYS)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum Showon {
  BANNER
  PUSH
  EMAIL
  SMS
  ALL
}

enum TargetAudience {
  ALL
  APPOINTED_USERS
  CANCELLED_USERS
}

enum ExpirationDuration {
  ONE_DAY
  THREE_DAYS
  SEVEN_DAYS
  THIRTY_DAYS
  NEVER
}

model BusinessDetail {
  id                         String                 @id @default(cuid())
  name                       String
  industry                   String
  email                      String                 @unique
  phone                      String
  website                    String?
  address                    BusinessAddress[]
  businessRegistrationNumber String
  status                     BusinessStatus         @default(PENDING)
  timeZone                   String?
  user                       User?                  @relation(fields: [businessOwner], references: [id], onDelete: Cascade)
  businessOwner              String?
  businessAdmins             BusinessAdmin[]
  businessCustomers          BusinessCustomer[] // Customers who booked with this business
  businessAvailability       BusinessAvailability[]
  serviceAvailability        ServiceAvailability[]
  holiday                    Holiday[]
  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
  supportBusinessDetail      SupportBusinessDetail?
  resources                  Resource[]
  services                   Service[]
  documents                  Document[]
}

model BusinessAdmin {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, businessId])
}

model BusinessCustomer {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([userId, businessId])
}

model BusinessAddress {
  id         String                 @id @default(cuid())
  street     String
  city       String
  country    String
  zipCode    String
  googleMap  String
  business   BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String?
  support    SupportBusinessDetail? @relation(fields: [supportId], references: [id], onDelete: Cascade)
  supportId  String?
}

model BusinessAvailability {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  weekDay                 WeekDays
  type                    AvailabilityType       @default(GENERAL)
  timeSlots               BusinessTime[]
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id], onDelete: Cascade)
  supportBusinessDetailId String?
}

enum AvailabilityType {
  GENERAL
  SUPPORT
}

enum BusinessTimeType {
  WORK
  BREAK
}

model BusinessTime {
  id                     String               @id @default(cuid())
  businessAvailability   BusinessAvailability @relation(fields: [businessAvailabilityId], references: [id], onDelete: Cascade)
  type                   BusinessTimeType     @default(WORK)
  businessAvailabilityId String
  startTime              String
  endTime                String
}

model Holiday {
  id                      String                 @id @default(cuid())
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String?
  holiday                 WeekDays
  type                    HolidayType            @default(GENERAL)
  date                    DateTime?
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id])
  supportBusinessDetailId String?
}

enum HolidayType {
  GENERAL
  SUPPORT
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model SupportBusinessDetail {
  id                  String                 @id @default(cuid())
  supportBusinessName String
  supportEmail        String                 @unique
  supportPhone        String
  supportGoogleMap    String?
  supportAvailability BusinessAvailability[]
  supportHoliday      Holiday[]
  supportAddress      String
  business            BusinessDetail         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String                 @unique
  BusinessAddress     BusinessAddress[]
}

model FAQ {
  id              String   @id @default(cuid())
  question        String
  answer          String
  category        String?
  isActive        Boolean  @default(true)
  order           Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastUpdatedById String
  User            User     @relation(fields: [createdById], references: [id])
  createdById     String
}

model Ticket {
  id                    String       @id @default(cuid())
  userType              Role
  subject               String
  ticketDescription     String
  category              String
  priority              Priority     @default(MEDIUM)
  status                TicketStatus @default(OPEN)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  assignedTo            String?
  resolutionDescription String?
  proofFiles            String?
  initiatedById         String?
  userId                String
  user                  User         @relation(fields: [userId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Resource {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  phone        String
  role         String
  address      String?
  businessId   String
  business     BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services     Service[]
  appointments Appointment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Individual {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  position        String
  profileImage    String?
  country         String
  zoomAccessToken String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  events          Event[]
}

enum VideoProvider {
  ZOOM
  GOOGLE_MEET
}

model Meeting {
  id            String         @id @default(cuid())
  eventId       String
  timeSlot      DateTime
  bookedByName  String
  bookedByEmail String
  customAnswers Json?
  videoUrl      String?
  videoProvider VideoProvider?
  slug          String?        @unique
  event         Event          @relation(fields: [eventId], references: [id])
}

model Availability {
  id        String @id @default(cuid())
  eventId   String
  dayOfWeek Int
  startTime String
  endTime   String
  duration  Int
  event     Event  @relation(fields: [eventId], references: [id])
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String?
  location     String
  slug         String         @unique
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  individualId String
  individual   Individual     @relation(fields: [individualId], references: [id])
  availability Availability[]
  meetings     Meeting[]
}

model Document {
  id            String          @id @default(cuid())
  content       String
  accessLevel   Role[]
  embedding     Float[]
  appointmentId String?
  appointment   Appointment?    @relation(fields: [appointmentId], references: [id])
  serviceId     String?
  service       Service?        @relation(fields: [serviceId], references: [id])
  businessId    String?
  business      BusinessDetail? @relation(fields: [businessId], references: [id])
}
